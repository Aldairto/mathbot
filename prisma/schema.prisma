generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id                 String              @id @default(cuid())
  name               String?
  email              String?             @unique
  emailVerified      DateTime?
  image              String?
  password           String?
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  resetToken         String?
  resetTokenExpires  DateTime?
  messages           Message[]
  quizResults        QuizResult[]
  adaptiveCurriculum AdaptiveCurriculum?
  correctAnswers     CorrectAnswer[]
  studyTimes         StudyTime[]
  quizState          UserQuizState?
  quizAttempts       QuizAttempt[]
}

model Message {
  id        String   @id @default(cuid())
  content   String   @db.LongText
  role      String
  createdAt DateTime @default(now())
  userId    String
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId], map: "Message_userId_fkey")
}

model QuizResult {
  id             String   @id @default(cuid())
  userId         String
  mainTopic      String
  subTopic       String
  correctCount   Int      @default(0)
  incorrectCount Int      @default(0)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  user           User     @relation(fields: [userId], references: [id])

  @@unique([userId, mainTopic, subTopic])
}

model AdaptiveCurriculum {
  id          String   @id @default(cuid())
  userId      String   @unique
  lastUpdated DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id])
  topics      Topic[]
}

model Topic {
  id                 String             @id @default(cuid())
  mainTopic          String
  subTopic           String
  difficulty         Float              @default(0.5)
  importance         Float              @default(0.5)
  curriculumId       String
  adaptiveCurriculum AdaptiveCurriculum @relation(fields: [curriculumId], references: [id])

  @@unique([curriculumId, mainTopic, subTopic])
}

model CorrectAnswer {
  id        String   @id @default(cuid())
  userId    String
  question  String
  answer    String
  explanation String?  // Campo opcional para la explicaci√≥n
  mainTopic String
  subTopic  String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

model StudyTime {
  id       String   @id @default(cuid())
  userId   String
  date     DateTime @default(now())
  duration Int
  user     User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

model UserQuizState {
  id        String   @id @default(cuid())
  userId    String   @unique
  state     String   @db.LongText  // Cambiado de @db.Text a @db.LongText
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}



model QuizAttempt {
  id            String   @id @default(cuid())
  userId        String
  mainTopic     String
  subTopic      String
  question      String
  userAnswer    String
  correctAnswer String
  isCorrect     Boolean
  createdAt     DateTime @default(now())
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([mainTopic, subTopic])
}
